# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""train_test_split-output

    TrainTestSplitOutput(;
        x_train=nothing,
        x_test=nothing,
        y_train=nothing,
        y_test=nothing,
    )

    - x_train::Vector{Vector{Float64}}
    - x_test::Vector{Vector{Float64}}
    - y_train::Vector{Float64}
    - y_test::Vector{Float64}
"""
Base.@kwdef mutable struct TrainTestSplitOutput <: OpenAPI.APIModel
    x_train::Union{Nothing, Vector{Vector{Float64}}} = nothing
    x_test::Union{Nothing, Vector{Vector{Float64}}} = nothing
    y_train::Union{Nothing, Vector{Float64}} = nothing
    y_test::Union{Nothing, Vector{Float64}} = nothing

    function TrainTestSplitOutput(x_train, x_test, y_train, y_test, )
        OpenAPI.validate_property(TrainTestSplitOutput, Symbol("x_train"), x_train)
        OpenAPI.validate_property(TrainTestSplitOutput, Symbol("x_test"), x_test)
        OpenAPI.validate_property(TrainTestSplitOutput, Symbol("y_train"), y_train)
        OpenAPI.validate_property(TrainTestSplitOutput, Symbol("y_test"), y_test)
        return new(x_train, x_test, y_train, y_test, )
    end
end # type TrainTestSplitOutput

const _property_types_TrainTestSplitOutput = Dict{Symbol,String}(Symbol("x_train")=>"Vector{Vector{Float64}}", Symbol("x_test")=>"Vector{Vector{Float64}}", Symbol("y_train")=>"Vector{Float64}", Symbol("y_test")=>"Vector{Float64}", )
OpenAPI.property_type(::Type{ TrainTestSplitOutput }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TrainTestSplitOutput[name]))}

function check_required(o::TrainTestSplitOutput)
    true
end

function OpenAPI.validate_property(::Type{ TrainTestSplitOutput }, name::Symbol, val)
end
