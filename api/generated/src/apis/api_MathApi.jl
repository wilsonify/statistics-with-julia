# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function accuracy_read(handler)
    function accuracy_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["AccuracyInput"] = OpenAPI.Servers.to_param_type(AccuracyInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function accuracy_validate(handler)
    function accuracy_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function accuracy_invoke(impl; post_invoke=nothing)
    function accuracy_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.accuracy(req::HTTP.Request; accuracy_input=get(openapi_params, "AccuracyInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function bucketize_read(handler)
    function bucketize_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["BucketizeInput"] = OpenAPI.Servers.to_param_type(BucketizeInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function bucketize_validate(handler)
    function bucketize_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function bucketize_invoke(impl; post_invoke=nothing)
    function bucketize_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.bucketize(req::HTTP.Request; bucketize_input=get(openapi_params, "BucketizeInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function correlation_read(handler)
    function correlation_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["CorrelationInput"] = OpenAPI.Servers.to_param_type(CorrelationInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function correlation_validate(handler)
    function correlation_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function correlation_invoke(impl; post_invoke=nothing)
    function correlation_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.correlation(req::HTTP.Request; correlation_input=get(openapi_params, "CorrelationInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function correlation_matrix_read(handler)
    function correlation_matrix_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["CorrelationMatrixInput"] = OpenAPI.Servers.to_param_type(CorrelationMatrixInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function correlation_matrix_validate(handler)
    function correlation_matrix_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function correlation_matrix_invoke(impl; post_invoke=nothing)
    function correlation_matrix_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.correlation_matrix(req::HTTP.Request; correlation_matrix_input=get(openapi_params, "CorrelationMatrixInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function covariance_read(handler)
    function covariance_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["CovarianceInput"] = OpenAPI.Servers.to_param_type(CovarianceInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function covariance_validate(handler)
    function covariance_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function covariance_invoke(impl; post_invoke=nothing)
    function covariance_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.covariance(req::HTTP.Request; covariance_input=get(openapi_params, "CovarianceInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function data_range_read(handler)
    function data_range_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["DataRangeInput"] = OpenAPI.Servers.to_param_type(DataRangeInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function data_range_validate(handler)
    function data_range_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function data_range_invoke(impl; post_invoke=nothing)
    function data_range_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.data_range(req::HTTP.Request; data_range_input=get(openapi_params, "DataRangeInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function de_mean_read(handler)
    function de_mean_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["DeMeanInput"] = OpenAPI.Servers.to_param_type(DeMeanInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function de_mean_validate(handler)
    function de_mean_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function de_mean_invoke(impl; post_invoke=nothing)
    function de_mean_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.de_mean(req::HTTP.Request; de_mean_input=get(openapi_params, "DeMeanInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function difference_quotient_read(handler)
    function difference_quotient_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["DifferenceQuotientInput"] = OpenAPI.Servers.to_param_type(DifferenceQuotientInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function difference_quotient_validate(handler)
    function difference_quotient_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function difference_quotient_invoke(impl; post_invoke=nothing)
    function difference_quotient_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.difference_quotient(req::HTTP.Request; difference_quotient_input=get(openapi_params, "DifferenceQuotientInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function distance_read(handler)
    function distance_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["DistanceInput"] = OpenAPI.Servers.to_param_type(DistanceInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function distance_validate(handler)
    function distance_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function distance_invoke(impl; post_invoke=nothing)
    function distance_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.distance(req::HTTP.Request; distance_input=get(openapi_params, "DistanceInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function dot_read(handler)
    function dot_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["DotInput"] = OpenAPI.Servers.to_param_type(DotInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function dot_validate(handler)
    function dot_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function dot_invoke(impl; post_invoke=nothing)
    function dot_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.dot(req::HTTP.Request; dot_input=get(openapi_params, "DotInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function echo_read(handler)
    function echo_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["body"] = OpenAPI.Servers.to_param_type(Any, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function echo_validate(handler)
    function echo_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function echo_invoke(impl; post_invoke=nothing)
    function echo_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.echo(req::HTTP.Request; body=get(openapi_params, "body", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function estimate_gradient_read(handler)
    function estimate_gradient_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["EstimateGradientInput"] = OpenAPI.Servers.to_param_type(EstimateGradientInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function estimate_gradient_validate(handler)
    function estimate_gradient_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function estimate_gradient_invoke(impl; post_invoke=nothing)
    function estimate_gradient_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.estimate_gradient(req::HTTP.Request; estimate_gradient_input=get(openapi_params, "EstimateGradientInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function f1_score_read(handler)
    function f1_score_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["F1ScoreInput"] = OpenAPI.Servers.to_param_type(F1ScoreInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function f1_score_validate(handler)
    function f1_score_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function f1_score_invoke(impl; post_invoke=nothing)
    function f1_score_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.f1_score(req::HTTP.Request; f1_score_input=get(openapi_params, "F1ScoreInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_column_read(handler)
    function get_column_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["GetColumnInput"] = OpenAPI.Servers.to_param_type(GetColumnInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_column_validate(handler)
    function get_column_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_column_invoke(impl; post_invoke=nothing)
    function get_column_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_column(req::HTTP.Request; get_column_input=get(openapi_params, "GetColumnInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_row_read(handler)
    function get_row_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["GetRowInput"] = OpenAPI.Servers.to_param_type(GetRowInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_row_validate(handler)
    function get_row_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function get_row_invoke(impl; post_invoke=nothing)
    function get_row_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_row(req::HTTP.Request; get_row_input=get(openapi_params, "GetRowInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function in_random_order_read(handler)
    function in_random_order_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["InRandomOrderInput"] = OpenAPI.Servers.to_param_type(InRandomOrderInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function in_random_order_validate(handler)
    function in_random_order_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function in_random_order_invoke(impl; post_invoke=nothing)
    function in_random_order_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.in_random_order(req::HTTP.Request; in_random_order_input=get(openapi_params, "InRandomOrderInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function interquartile_range_read(handler)
    function interquartile_range_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["InterquartileRangeInput"] = OpenAPI.Servers.to_param_type(InterquartileRangeInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function interquartile_range_validate(handler)
    function interquartile_range_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function interquartile_range_invoke(impl; post_invoke=nothing)
    function interquartile_range_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.interquartile_range(req::HTTP.Request; interquartile_range_input=get(openapi_params, "InterquartileRangeInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function magnitude_read(handler)
    function magnitude_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["MagnitudeInput"] = OpenAPI.Servers.to_param_type(MagnitudeInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function magnitude_validate(handler)
    function magnitude_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function magnitude_invoke(impl; post_invoke=nothing)
    function magnitude_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.magnitude(req::HTTP.Request; magnitude_input=get(openapi_params, "MagnitudeInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function matrix_add_read(handler)
    function matrix_add_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["MatrixAddInput"] = OpenAPI.Servers.to_param_type(MatrixAddInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function matrix_add_validate(handler)
    function matrix_add_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function matrix_add_invoke(impl; post_invoke=nothing)
    function matrix_add_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.matrix_add(req::HTTP.Request; matrix_add_input=get(openapi_params, "MatrixAddInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function maximize_batch_read(handler)
    function maximize_batch_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["MaximizeBatchInput"] = OpenAPI.Servers.to_param_type(MaximizeBatchInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function maximize_batch_validate(handler)
    function maximize_batch_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function maximize_batch_invoke(impl; post_invoke=nothing)
    function maximize_batch_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.maximize_batch(req::HTTP.Request; maximize_batch_input=get(openapi_params, "MaximizeBatchInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function maximize_stochastic_read(handler)
    function maximize_stochastic_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["MaximizeStochasticInput"] = OpenAPI.Servers.to_param_type(MaximizeStochasticInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function maximize_stochastic_validate(handler)
    function maximize_stochastic_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function maximize_stochastic_invoke(impl; post_invoke=nothing)
    function maximize_stochastic_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.maximize_stochastic(req::HTTP.Request; maximize_stochastic_input=get(openapi_params, "MaximizeStochasticInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function mean_read(handler)
    function mean_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["MeanInput"] = OpenAPI.Servers.to_param_type(MeanInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function mean_validate(handler)
    function mean_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function mean_invoke(impl; post_invoke=nothing)
    function mean_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.mean(req::HTTP.Request; mean_input=get(openapi_params, "MeanInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function median_read(handler)
    function median_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["MedianInput"] = OpenAPI.Servers.to_param_type(MedianInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function median_validate(handler)
    function median_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function median_invoke(impl; post_invoke=nothing)
    function median_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.median(req::HTTP.Request; median_input=get(openapi_params, "MedianInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function minimize_batch_read(handler)
    function minimize_batch_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["MinimizeBatchInput"] = OpenAPI.Servers.to_param_type(MinimizeBatchInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function minimize_batch_validate(handler)
    function minimize_batch_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function minimize_batch_invoke(impl; post_invoke=nothing)
    function minimize_batch_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.minimize_batch(req::HTTP.Request; minimize_batch_input=get(openapi_params, "MinimizeBatchInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function minimize_stochastic_read(handler)
    function minimize_stochastic_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["MinimizeStochasticInput"] = OpenAPI.Servers.to_param_type(MinimizeStochasticInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function minimize_stochastic_validate(handler)
    function minimize_stochastic_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function minimize_stochastic_invoke(impl; post_invoke=nothing)
    function minimize_stochastic_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.minimize_stochastic(req::HTTP.Request; minimize_stochastic_input=get(openapi_params, "MinimizeStochasticInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function mode_read(handler)
    function mode_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["ModeInput"] = OpenAPI.Servers.to_param_type(ModeInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function mode_validate(handler)
    function mode_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function mode_invoke(impl; post_invoke=nothing)
    function mode_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.mode(req::HTTP.Request; mode_input=get(openapi_params, "ModeInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function partial_difference_quotient_read(handler)
    function partial_difference_quotient_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["PartialDifferenceQuotientInput"] = OpenAPI.Servers.to_param_type(PartialDifferenceQuotientInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function partial_difference_quotient_validate(handler)
    function partial_difference_quotient_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function partial_difference_quotient_invoke(impl; post_invoke=nothing)
    function partial_difference_quotient_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.partial_difference_quotient(req::HTTP.Request; partial_difference_quotient_input=get(openapi_params, "PartialDifferenceQuotientInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function precision_read(handler)
    function precision_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["PrecisionInput"] = OpenAPI.Servers.to_param_type(PrecisionInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function precision_validate(handler)
    function precision_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function precision_invoke(impl; post_invoke=nothing)
    function precision_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.precision(req::HTTP.Request; precision_input=get(openapi_params, "PrecisionInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function quantile_read(handler)
    function quantile_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["QuantileInput"] = OpenAPI.Servers.to_param_type(QuantileInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function quantile_validate(handler)
    function quantile_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function quantile_invoke(impl; post_invoke=nothing)
    function quantile_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.quantile(req::HTTP.Request; quantile_input=get(openapi_params, "QuantileInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function recall_read(handler)
    function recall_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["RecallInput"] = OpenAPI.Servers.to_param_type(RecallInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function recall_validate(handler)
    function recall_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function recall_invoke(impl; post_invoke=nothing)
    function recall_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.recall(req::HTTP.Request; recall_input=get(openapi_params, "RecallInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function scalar_multiply_read(handler)
    function scalar_multiply_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["ScalarMultiplyInput"] = OpenAPI.Servers.to_param_type(ScalarMultiplyInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function scalar_multiply_validate(handler)
    function scalar_multiply_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function scalar_multiply_invoke(impl; post_invoke=nothing)
    function scalar_multiply_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.scalar_multiply(req::HTTP.Request; scalar_multiply_input=get(openapi_params, "ScalarMultiplyInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function shape_read(handler)
    function shape_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["ShapeInput"] = OpenAPI.Servers.to_param_type(ShapeInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function shape_validate(handler)
    function shape_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function shape_invoke(impl; post_invoke=nothing)
    function shape_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.shape(req::HTTP.Request; shape_input=get(openapi_params, "ShapeInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function split_data_read(handler)
    function split_data_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["SplitDataInput"] = OpenAPI.Servers.to_param_type(SplitDataInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function split_data_validate(handler)
    function split_data_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function split_data_invoke(impl; post_invoke=nothing)
    function split_data_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.split_data(req::HTTP.Request; split_data_input=get(openapi_params, "SplitDataInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function sqrt_read(handler)
    function sqrt_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["SqrtInput"] = OpenAPI.Servers.to_param_type(SqrtInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function sqrt_validate(handler)
    function sqrt_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function sqrt_invoke(impl; post_invoke=nothing)
    function sqrt_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.sqrt(req::HTTP.Request; sqrt_input=get(openapi_params, "SqrtInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function squared_distance_read(handler)
    function squared_distance_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["SquaredDistanceInput"] = OpenAPI.Servers.to_param_type(SquaredDistanceInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function squared_distance_validate(handler)
    function squared_distance_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function squared_distance_invoke(impl; post_invoke=nothing)
    function squared_distance_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.squared_distance(req::HTTP.Request; squared_distance_input=get(openapi_params, "SquaredDistanceInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function standard_deviation_read(handler)
    function standard_deviation_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["StandardDeviationInput"] = OpenAPI.Servers.to_param_type(StandardDeviationInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function standard_deviation_validate(handler)
    function standard_deviation_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function standard_deviation_invoke(impl; post_invoke=nothing)
    function standard_deviation_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.standard_deviation(req::HTTP.Request; standard_deviation_input=get(openapi_params, "StandardDeviationInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function strength_read(handler)
    function strength_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["StrengthInput"] = OpenAPI.Servers.to_param_type(StrengthInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function strength_validate(handler)
    function strength_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function strength_invoke(impl; post_invoke=nothing)
    function strength_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.strength(req::HTTP.Request; strength_input=get(openapi_params, "StrengthInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function sum_of_squares_read(handler)
    function sum_of_squares_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["SumOfSquaresInput"] = OpenAPI.Servers.to_param_type(SumOfSquaresInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function sum_of_squares_validate(handler)
    function sum_of_squares_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function sum_of_squares_invoke(impl; post_invoke=nothing)
    function sum_of_squares_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.sum_of_squares(req::HTTP.Request; sum_of_squares_input=get(openapi_params, "SumOfSquaresInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function train_test_split_read(handler)
    function train_test_split_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["TrainTestSplitInput"] = OpenAPI.Servers.to_param_type(TrainTestSplitInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function train_test_split_validate(handler)
    function train_test_split_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function train_test_split_invoke(impl; post_invoke=nothing)
    function train_test_split_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.train_test_split(req::HTTP.Request; train_test_split_input=get(openapi_params, "TrainTestSplitInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function variance_read(handler)
    function variance_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["VarianceInput"] = OpenAPI.Servers.to_param_type(VarianceInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function variance_validate(handler)
    function variance_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function variance_invoke(impl; post_invoke=nothing)
    function variance_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.variance(req::HTTP.Request; variance_input=get(openapi_params, "VarianceInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function vector_add_read(handler)
    function vector_add_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["VectorAddInput"] = OpenAPI.Servers.to_param_type(VectorAddInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function vector_add_validate(handler)
    function vector_add_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function vector_add_invoke(impl; post_invoke=nothing)
    function vector_add_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.vector_add(req::HTTP.Request; vector_add_input=get(openapi_params, "VectorAddInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function vector_mean_read(handler)
    function vector_mean_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["VectorMeanInput"] = OpenAPI.Servers.to_param_type(VectorMeanInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function vector_mean_validate(handler)
    function vector_mean_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function vector_mean_invoke(impl; post_invoke=nothing)
    function vector_mean_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.vector_mean(req::HTTP.Request; vector_mean_input=get(openapi_params, "VectorMeanInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function vector_subtract_read(handler)
    function vector_subtract_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["VectorSubtractInput"] = OpenAPI.Servers.to_param_type(VectorSubtractInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function vector_subtract_validate(handler)
    function vector_subtract_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function vector_subtract_invoke(impl; post_invoke=nothing)
    function vector_subtract_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.vector_subtract(req::HTTP.Request; vector_subtract_input=get(openapi_params, "VectorSubtractInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function vector_sum_read(handler)
    function vector_sum_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["VectorSumInput"] = OpenAPI.Servers.to_param_type(VectorSumInput, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function vector_sum_validate(handler)
    function vector_sum_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function vector_sum_invoke(impl; post_invoke=nothing)
    function vector_sum_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.vector_sum(req::HTTP.Request; vector_sum_input=get(openapi_params, "VectorSumInput", nothing),)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerMathApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/accuracy", OpenAPI.Servers.middleware(impl, accuracy_read, accuracy_validate, accuracy_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/bucketize", OpenAPI.Servers.middleware(impl, bucketize_read, bucketize_validate, bucketize_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/correlation", OpenAPI.Servers.middleware(impl, correlation_read, correlation_validate, correlation_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/correlation_matrix", OpenAPI.Servers.middleware(impl, correlation_matrix_read, correlation_matrix_validate, correlation_matrix_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/covariance", OpenAPI.Servers.middleware(impl, covariance_read, covariance_validate, covariance_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/data_range", OpenAPI.Servers.middleware(impl, data_range_read, data_range_validate, data_range_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/de_mean", OpenAPI.Servers.middleware(impl, de_mean_read, de_mean_validate, de_mean_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/difference_quotient", OpenAPI.Servers.middleware(impl, difference_quotient_read, difference_quotient_validate, difference_quotient_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/distance", OpenAPI.Servers.middleware(impl, distance_read, distance_validate, distance_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/dot", OpenAPI.Servers.middleware(impl, dot_read, dot_validate, dot_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/echo", OpenAPI.Servers.middleware(impl, echo_read, echo_validate, echo_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/estimate_gradient", OpenAPI.Servers.middleware(impl, estimate_gradient_read, estimate_gradient_validate, estimate_gradient_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/f1_score", OpenAPI.Servers.middleware(impl, f1_score_read, f1_score_validate, f1_score_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/get_column", OpenAPI.Servers.middleware(impl, get_column_read, get_column_validate, get_column_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/get_row", OpenAPI.Servers.middleware(impl, get_row_read, get_row_validate, get_row_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/in_random_order", OpenAPI.Servers.middleware(impl, in_random_order_read, in_random_order_validate, in_random_order_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/interquartile_range", OpenAPI.Servers.middleware(impl, interquartile_range_read, interquartile_range_validate, interquartile_range_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/magnitude", OpenAPI.Servers.middleware(impl, magnitude_read, magnitude_validate, magnitude_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/matrix_add", OpenAPI.Servers.middleware(impl, matrix_add_read, matrix_add_validate, matrix_add_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/maximize_batch", OpenAPI.Servers.middleware(impl, maximize_batch_read, maximize_batch_validate, maximize_batch_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/maximize_stochastic", OpenAPI.Servers.middleware(impl, maximize_stochastic_read, maximize_stochastic_validate, maximize_stochastic_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/mean", OpenAPI.Servers.middleware(impl, mean_read, mean_validate, mean_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/median", OpenAPI.Servers.middleware(impl, median_read, median_validate, median_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/minimize_batch", OpenAPI.Servers.middleware(impl, minimize_batch_read, minimize_batch_validate, minimize_batch_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/minimize_stochastic", OpenAPI.Servers.middleware(impl, minimize_stochastic_read, minimize_stochastic_validate, minimize_stochastic_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/mode", OpenAPI.Servers.middleware(impl, mode_read, mode_validate, mode_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/partial_difference_quotient", OpenAPI.Servers.middleware(impl, partial_difference_quotient_read, partial_difference_quotient_validate, partial_difference_quotient_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/precision", OpenAPI.Servers.middleware(impl, precision_read, precision_validate, precision_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/quantile", OpenAPI.Servers.middleware(impl, quantile_read, quantile_validate, quantile_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/recall", OpenAPI.Servers.middleware(impl, recall_read, recall_validate, recall_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/scalar_multiply", OpenAPI.Servers.middleware(impl, scalar_multiply_read, scalar_multiply_validate, scalar_multiply_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/shape", OpenAPI.Servers.middleware(impl, shape_read, shape_validate, shape_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/split_data", OpenAPI.Servers.middleware(impl, split_data_read, split_data_validate, split_data_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/sqrt", OpenAPI.Servers.middleware(impl, sqrt_read, sqrt_validate, sqrt_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/squared_distance", OpenAPI.Servers.middleware(impl, squared_distance_read, squared_distance_validate, squared_distance_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/standard_deviation", OpenAPI.Servers.middleware(impl, standard_deviation_read, standard_deviation_validate, standard_deviation_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/strength", OpenAPI.Servers.middleware(impl, strength_read, strength_validate, strength_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/sum_of_squares", OpenAPI.Servers.middleware(impl, sum_of_squares_read, sum_of_squares_validate, sum_of_squares_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/train_test_split", OpenAPI.Servers.middleware(impl, train_test_split_read, train_test_split_validate, train_test_split_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/variance", OpenAPI.Servers.middleware(impl, variance_read, variance_validate, variance_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/vector_add", OpenAPI.Servers.middleware(impl, vector_add_read, vector_add_validate, vector_add_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/vector_mean", OpenAPI.Servers.middleware(impl, vector_mean_read, vector_mean_validate, vector_mean_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/vector_subtract", OpenAPI.Servers.middleware(impl, vector_subtract_read, vector_subtract_validate, vector_subtract_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/vector_sum", OpenAPI.Servers.middleware(impl, vector_sum_read, vector_sum_validate, vector_sum_invoke; optional_middlewares...))
    return router
end
