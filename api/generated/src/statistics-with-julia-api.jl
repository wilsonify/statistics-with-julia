# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
Encapsulates generated server code for statistics-with-julia-api

The following server methods must be implemented:

- **accuracy**
    - *invocation:* POST /accuracy
    - *signature:* accuracy(req::HTTP.Request; accuracy_input=nothing,) -> Float64
- **bucketize**
    - *invocation:* POST /bucketize
    - *signature:* bucketize(req::HTTP.Request; bucketize_input=nothing,) -> BucketizeOutput
- **correlation**
    - *invocation:* POST /correlation
    - *signature:* correlation(req::HTTP.Request; correlation_input=nothing,) -> CorrelationOutput
- **correlation_matrix**
    - *invocation:* POST /correlation_matrix
    - *signature:* correlation_matrix(req::HTTP.Request; correlation_matrix_input=nothing,) -> CorrelationMatrixOutput
- **covariance**
    - *invocation:* POST /covariance
    - *signature:* covariance(req::HTTP.Request; covariance_input=nothing,) -> CovarianceOutput
- **data_range**
    - *invocation:* POST /data_range
    - *signature:* data_range(req::HTTP.Request; data_range_input=nothing,) -> DataRangeOutput
- **de_mean**
    - *invocation:* POST /de_mean
    - *signature:* de_mean(req::HTTP.Request; de_mean_input=nothing,) -> DeMeanOutput
- **difference_quotient**
    - *invocation:* POST /difference_quotient
    - *signature:* difference_quotient(req::HTTP.Request; difference_quotient_input=nothing,) -> DifferenceQuotientOutput
- **distance**
    - *invocation:* POST /distance
    - *signature:* distance(req::HTTP.Request; distance_input=nothing,) -> DistanceOutput
- **dot**
    - *invocation:* POST /dot
    - *signature:* dot(req::HTTP.Request; dot_input=nothing,) -> DotOutput
- **echo**
    - *invocation:* POST /echo
    - *signature:* echo(req::HTTP.Request; body=nothing,) -> Any
- **estimate_gradient**
    - *invocation:* POST /estimate_gradient
    - *signature:* estimate_gradient(req::HTTP.Request; estimate_gradient_input=nothing,) -> EstimateGradientOutput
- **f1_score**
    - *invocation:* POST /f1_score
    - *signature:* f1_score(req::HTTP.Request; f1_score_input=nothing,) -> Float64
- **get_column**
    - *invocation:* POST /get_column
    - *signature:* get_column(req::HTTP.Request; get_column_input=nothing,) -> GetColumnOutput
- **get_row**
    - *invocation:* POST /get_row
    - *signature:* get_row(req::HTTP.Request; get_row_input=nothing,) -> GetRowOutput
- **in_random_order**
    - *invocation:* POST /in_random_order
    - *signature:* in_random_order(req::HTTP.Request; in_random_order_input=nothing,) -> Vector{Float64}
- **interquartile_range**
    - *invocation:* POST /interquartile_range
    - *signature:* interquartile_range(req::HTTP.Request; interquartile_range_input=nothing,) -> Float64
- **magnitude**
    - *invocation:* POST /magnitude
    - *signature:* magnitude(req::HTTP.Request; magnitude_input=nothing,) -> Float64
- **matrix_add**
    - *invocation:* POST /matrix_add
    - *signature:* matrix_add(req::HTTP.Request; matrix_add_input=nothing,) -> Vector{Vector{Float64}}
- **maximize_batch**
    - *invocation:* POST /maximize_batch
    - *signature:* maximize_batch(req::HTTP.Request; maximize_batch_input=nothing,) -> MaximizeBatchOutput
- **maximize_stochastic**
    - *invocation:* POST /maximize_stochastic
    - *signature:* maximize_stochastic(req::HTTP.Request; maximize_stochastic_input=nothing,) -> MaximizeStochasticOutput
- **mean**
    - *invocation:* POST /mean
    - *signature:* mean(req::HTTP.Request; mean_input=nothing,) -> Float64
- **median**
    - *invocation:* POST /median
    - *signature:* median(req::HTTP.Request; median_input=nothing,) -> Float64
- **minimize_batch**
    - *invocation:* POST /minimize_batch
    - *signature:* minimize_batch(req::HTTP.Request; minimize_batch_input=nothing,) -> MinimizeBatchOutput
- **minimize_stochastic**
    - *invocation:* POST /minimize_stochastic
    - *signature:* minimize_stochastic(req::HTTP.Request; minimize_stochastic_input=nothing,) -> MinimizeStochasticOutput
- **mode**
    - *invocation:* POST /mode
    - *signature:* mode(req::HTTP.Request; mode_input=nothing,) -> Vector{Float64}
- **partial_difference_quotient**
    - *invocation:* POST /partial_difference_quotient
    - *signature:* partial_difference_quotient(req::HTTP.Request; partial_difference_quotient_input=nothing,) -> PartialDifferenceQuotientOutput
- **precision**
    - *invocation:* POST /precision
    - *signature:* precision(req::HTTP.Request; precision_input=nothing,) -> Float64
- **quantile**
    - *invocation:* POST /quantile
    - *signature:* quantile(req::HTTP.Request; quantile_input=nothing,) -> Float64
- **recall**
    - *invocation:* POST /recall
    - *signature:* recall(req::HTTP.Request; recall_input=nothing,) -> Float64
- **scalar_multiply**
    - *invocation:* POST /scalar_multiply
    - *signature:* scalar_multiply(req::HTTP.Request; scalar_multiply_input=nothing,) -> Vector{Vector{Float64}}
- **shape**
    - *invocation:* POST /shape
    - *signature:* shape(req::HTTP.Request; shape_input=nothing,) -> ShapeOutput
- **split_data**
    - *invocation:* POST /split_data
    - *signature:* split_data(req::HTTP.Request; split_data_input=nothing,) -> SplitDataOutput
- **sqrt**
    - *invocation:* POST /sqrt
    - *signature:* sqrt(req::HTTP.Request; sqrt_input=nothing,) -> SqrtOutput
- **squared_distance**
    - *invocation:* POST /squared_distance
    - *signature:* squared_distance(req::HTTP.Request; squared_distance_input=nothing,) -> Vector{Float64}
- **standard_deviation**
    - *invocation:* POST /standard_deviation
    - *signature:* standard_deviation(req::HTTP.Request; standard_deviation_input=nothing,) -> Float64
- **strength**
    - *invocation:* POST /strength
    - *signature:* strength(req::HTTP.Request; strength_input=nothing,) -> StrengthOutput
- **sum_of_squares**
    - *invocation:* POST /sum_of_squares
    - *signature:* sum_of_squares(req::HTTP.Request; sum_of_squares_input=nothing,) -> Float64
- **train_test_split**
    - *invocation:* POST /train_test_split
    - *signature:* train_test_split(req::HTTP.Request; train_test_split_input=nothing,) -> TrainTestSplitOutput
- **variance**
    - *invocation:* POST /variance
    - *signature:* variance(req::HTTP.Request; variance_input=nothing,) -> Float64
- **vector_add**
    - *invocation:* POST /vector_add
    - *signature:* vector_add(req::HTTP.Request; vector_add_input=nothing,) -> Vector{Float64}
- **vector_mean**
    - *invocation:* POST /vector_mean
    - *signature:* vector_mean(req::HTTP.Request; vector_mean_input=nothing,) -> Vector{Float64}
- **vector_subtract**
    - *invocation:* POST /vector_subtract
    - *signature:* vector_subtract(req::HTTP.Request; vector_subtract_input=nothing,) -> Vector{Float64}
- **vector_sum**
    - *invocation:* POST /vector_sum
    - *signature:* vector_sum(req::HTTP.Request; vector_sum_input=nothing,) -> Vector{Float64}
- **add_pet**
    - *invocation:* POST /pet
    - *signature:* add_pet(req::HTTP.Request, body::Pet;) -> Nothing
- **delete_pet**
    - *invocation:* DELETE /pet/{petId}
    - *signature:* delete_pet(req::HTTP.Request, pet_id::Int64; api_key=nothing,) -> Nothing
- **find_pets_by_status**
    - *invocation:* GET /pet/findByStatus
    - *signature:* find_pets_by_status(req::HTTP.Request, status::Vector{String};) -> Vector{Pet}
- **find_pets_by_tags**
    - *invocation:* GET /pet/findByTags
    - *signature:* find_pets_by_tags(req::HTTP.Request, tags::Vector{String};) -> Vector{Pet}
- **get_pet_by_id**
    - *invocation:* GET /pet/{petId}
    - *signature:* get_pet_by_id(req::HTTP.Request, pet_id::Int64;) -> Pet
- **update_pet**
    - *invocation:* PUT /pet
    - *signature:* update_pet(req::HTTP.Request, body::Pet;) -> Nothing
- **update_pet_with_form**
    - *invocation:* POST /pet/{petId}
    - *signature:* update_pet_with_form(req::HTTP.Request, pet_id::Int64; name=nothing, status=nothing,) -> Nothing
- **upload_file**
    - *invocation:* POST /pet/{petId}/uploadImage
    - *signature:* upload_file(req::HTTP.Request, pet_id::Int64; additional_metadata=nothing, file=nothing,) -> ApiResponse
- **delete_order**
    - *invocation:* DELETE /store/order/{orderId}
    - *signature:* delete_order(req::HTTP.Request, order_id::Int64;) -> Nothing
- **get_inventory**
    - *invocation:* GET /store/inventory
    - *signature:* get_inventory(req::HTTP.Request;) -> Dict{String, Int64}
- **get_order_by_id**
    - *invocation:* GET /store/order/{orderId}
    - *signature:* get_order_by_id(req::HTTP.Request, order_id::Int64;) -> Order
- **place_order**
    - *invocation:* POST /store/order
    - *signature:* place_order(req::HTTP.Request, body::Order;) -> Order
- **create_user**
    - *invocation:* POST /user
    - *signature:* create_user(req::HTTP.Request, body::User;) -> Nothing
- **create_users_with_array_input**
    - *invocation:* POST /user/createWithArray
    - *signature:* create_users_with_array_input(req::HTTP.Request, body::Vector{User};) -> Nothing
- **create_users_with_list_input**
    - *invocation:* POST /user/createWithList
    - *signature:* create_users_with_list_input(req::HTTP.Request, body::Vector{User};) -> Nothing
- **delete_user**
    - *invocation:* DELETE /user/{username}
    - *signature:* delete_user(req::HTTP.Request, username::String;) -> Nothing
- **get_user_by_name**
    - *invocation:* GET /user/{username}
    - *signature:* get_user_by_name(req::HTTP.Request, username::String;) -> User
- **login_user**
    - *invocation:* GET /user/login
    - *signature:* login_user(req::HTTP.Request, username::String, password::String;) -> String
- **logout_user**
    - *invocation:* GET /user/logout
    - *signature:* logout_user(req::HTTP.Request;) -> Nothing
- **update_user**
    - *invocation:* PUT /user/{username}
    - *signature:* update_user(req::HTTP.Request, username::String, body::User;) -> Nothing
"""
module statistics-with-julia-api

using HTTP
using URIs
using Dates
using TimeZones
using OpenAPI
using OpenAPI.Servers

const API_VERSION = "1.0.0"

include("modelincludes.jl")

include("apis/api_MathApi.jl")
include("apis/api_PetApi.jl")
include("apis/api_StoreApi.jl")
include("apis/api_UserApi.jl")

"""
Register handlers for all APIs in this module in the supplied `Router` instance.

Paramerets:
- `router`: Router to register handlers in
- `impl`: module that implements the server methods

Optional parameters:
- `path_prefix`: prefix to be applied to all paths
- `optional_middlewares`: Register one or more optional middlewares to be applied to all requests.

Optional middlewares can be one or more of:
    - `init`: called before the request is processed
    - `pre_validation`: called after the request is parsed but before validation
    - `pre_invoke`: called after validation but before the handler is invoked
    - `post_invoke`: called after the handler is invoked but before the response is sent

The order in which middlewares are invoked are:
`init |> read |> pre_validation |> validate |> pre_invoke |> invoke |> post_invoke`
"""
function register(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    registerMathApi(router, impl; path_prefix=path_prefix, optional_middlewares...)
    registerPetApi(router, impl; path_prefix=path_prefix, optional_middlewares...)
    registerStoreApi(router, impl; path_prefix=path_prefix, optional_middlewares...)
    registerUserApi(router, impl; path_prefix=path_prefix, optional_middlewares...)
    return router
end

# export models
export AccuracyInput
export ApiResponse
export BucketizeInput
export BucketizeOutput
export Category
export CorrelationInput
export CorrelationMatrixInput
export CorrelationMatrixOutput
export CorrelationOutput
export CovarianceInput
export CovarianceOutput
export DataRangeInput
export DataRangeOutput
export DeMeanInput
export DeMeanOutput
export DifferenceQuotientInput
export DifferenceQuotientOutput
export DistanceInput
export DistanceOutput
export DotInput
export DotOutput
export EstimateGradientInput
export EstimateGradientOutput
export F1ScoreInput
export GetColumnInput
export GetColumnOutput
export GetRowInput
export GetRowOutput
export InRandomOrderInput
export InterquartileRangeInput
export MagnitudeInput
export MatrixAddInput
export MaximizeBatchInput
export MaximizeBatchOutput
export MaximizeStochasticInput
export MaximizeStochasticOutput
export MeanInput
export MedianInput
export MinimizeBatchInput
export MinimizeBatchOutput
export MinimizeStochasticInput
export MinimizeStochasticOutput
export ModeInput
export Order
export PartialDifferenceQuotientInput
export PartialDifferenceQuotientOutput
export Pet
export PrecisionInput
export QuantileInput
export RecallInput
export ScalarMultiplyInput
export ShapeInput
export ShapeOutput
export SplitDataInput
export SplitDataOutput
export SqrtInput
export SqrtOutput
export SquaredDistanceInput
export StandardDeviationInput
export StrengthInput
export StrengthOutput
export SumOfSquaresInput
export Tag
export TrainTestSplitInput
export TrainTestSplitOutput
export User
export VarianceInput
export VectorAddInput
export VectorMeanInput
export VectorSubtractInput
export VectorSumInput

end # module statistics-with-julia-api
